[{"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\index.js":"1","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\App.js":"2","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\reportWebVitals.js":"3","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AllStudents.jsx":"4","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentTable.jsx":"5","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentDetails.jsx":"6","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Modal.jsx":"7","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoDetails.jsx":"8","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\StudentContactInfoAddAndShow.jsx":"9","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetails.jsx":"10","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoForm.jsx":"11","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\SelectDormForm.jsx":"12","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseDetails.jsx":"13","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\RemoveCourseStudent.jsx":"14","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\AvailableCourses.jsx":"15","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\CheckBox.jsx":"16","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\NavBar.jsx":"17","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\CreateOrEditStudent.jsx":"18","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentForm.jsx":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":708,"mtime":1610829191333,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":767,"mtime":1610829170689,"results":"24","hashOfConfig":"21"},{"size":3117,"mtime":1610390289443,"results":"25","hashOfConfig":"21"},{"size":6855,"mtime":1610849655796,"results":"26","hashOfConfig":"21"},{"size":1585,"mtime":1610835202565,"results":"27","hashOfConfig":"21"},{"size":351,"mtime":1610501916440,"results":"28","hashOfConfig":"21"},{"size":938,"mtime":1610816369316,"results":"29","hashOfConfig":"21"},{"size":259,"mtime":1610564353164,"results":"30","hashOfConfig":"21"},{"size":1724,"mtime":1610835157558,"results":"31","hashOfConfig":"21"},{"size":1989,"mtime":1610676864559,"results":"32","hashOfConfig":"21"},{"size":1923,"mtime":1610659415531,"results":"33","hashOfConfig":"21"},{"size":855,"mtime":1610768659835,"results":"34","hashOfConfig":"21"},{"size":2801,"mtime":1610778453560,"results":"35","hashOfConfig":"21"},{"size":810,"mtime":1610778428670,"results":"36","hashOfConfig":"21"},{"size":321,"mtime":1610779187420,"results":"37","hashOfConfig":"21"},{"size":1995,"mtime":1610836063871,"results":"38","hashOfConfig":"21"},{"size":1672,"mtime":1610835350016,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1myypxa",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\index.js",[],["85","86"],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\App.js",["87","88"],"import './App.css';\nimport {Router, Redirect, Link} from \"@reach/router\";\nimport AllStudents from \"./component/student/AllStudents.jsx\";\nimport StudentDetails from\"./component/student/StudentDetails.jsx\";\nimport CourseDetails from \"./component/course/CourseDetails\";\nimport NavBar from \"./component/module/NavBar\";\nimport CreateOrEditStudent from \"./component/student/CreateOrEditStudent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar>\n      <CreateOrEditStudent />\n      <Router>\n        <AllStudents path = \"/\" />\n        <StudentDetails path = \"/students/:id\" />\n        <CourseDetails path =\"/courses/:id\" />\n      </Router>\n      </NavBar>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\reportWebVitals.js",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AllStudents.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentTable.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentDetails.jsx",["89"],"import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport StudentContactInfoAddAndShow from \"../contactInfo/StudentContactInfoAddAndShow.jsx\";\r\nimport DormDetails from \"../dorm/DormDetails.jsx\";\r\nimport SelectDormForm from \"../dorm/SelectDormForm.jsx\";\r\nimport {Link, navigate} from \"@reach/router\";\r\nimport RemoveCourseStudent from \"../course/RemoveCourseStudent.jsx\";\r\nimport AvailableCourses from \"../course/AvailableCourses.jsx\";\r\nimport CreateOrEditStudent from \"./CreateOrEditStudent.jsx\";\r\n\r\nconst StudentDetails = props =>{\r\n\r\n    const [curStudent, setCurStudent] = useState({});\r\n    const [enrolledCourses, setEnrolledCourses] = useState([]);\r\n    const [availableCourses, setAvailableCourses] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [contactinfo, setContactinfo] = useState({});\r\n    const [dorm, setDorm] = useState({})\r\n    const [newContactInfo, setNewContactInfo] = useState({\r\n        homeAddress: \"\",\r\n        email:  \"\",\r\n        phone: \"\",\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        // get current student\r\n        axios.get(\"http://localhost:8080/api/students/\" + props.id)\r\n        .then(res => {\r\n            setCurStudent(res.data);\r\n\r\n            // get student contact info\r\n            setContactinfo(res.data.contactinfo);\r\n\r\n            // get student dorm\r\n            setDorm(res.data.dorm);\r\n\r\n            // get student enrolling courses\r\n            setEnrolledCourses(res.data.courses);\r\n\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting current sutdent. Details: \" + err);\r\n        });\r\n\r\n        // get unerolled courses\r\n        axios.get(\"http://localhost:8080/api/courses/students/\" + props.id)\r\n        .then(res=>{\r\n            setAvailableCourses(res.data);\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting available courses. Details: \" + err);\r\n        });\r\n\r\n        return ()=>{ setCurStudent({}); setContactinfo({}); setDorm({}); setAvailableCourses([]); }\r\n    }, [isLoaded, props.id]);\r\n\r\n    // update contact info\r\n    const updateContactInfo = (updatedContactInfo) => {\r\n\r\n        axios.patch(\"http://localhost:8080/api/students/\" + props.id + \"/contactinfos/\" + contactinfo.id, updatedContactInfo, {headers:{\r\n            \"Content-Type\":\"application/json; charset=utf-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }})\r\n\r\n        .then(res=> {\r\n            setCurStudent(res.data);\r\n            \r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"Error on updating contact infomation. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // add new contact infomation\r\n    const addContactInfo = (updatedContactInfo) => {\r\n\r\n        axios.post(\"http://localhost:8080/api/students/\" + props.id + \"/contactinfos\", updatedContactInfo, {headers:{\r\n            \"Content-Type\":\"application/json; charset=utf-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }})\r\n        .then(res=> {\r\n            setCurStudent(res.data);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"Error on creating new contact infomation. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // assign dorm to student\r\n    const assignDorm = (curStudent) => {\r\n        axios.put(\"http://localhost:8080/api/students/\" + props.id + \"/dorms\", curStudent)\r\n        .then(res=>{\r\n            setDorm(res.data);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on assigning dorm. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // update enrolledCourses and availableCourses\r\n    const updateDom = (courseRemoved) =>{\r\n        setEnrolledCourses(enrolledCourses.filter(course => course.id !== courseRemoved.id));\r\n        setAvailableCourses([...availableCourses, courseRemoved])\r\n    };\r\n\r\n    // delete this student\r\n    const deleteStudent = (e) => {\r\n        e.preventDefault();\r\n        axios.delete(\"http://localhost:8080/api/students/\" + props.id)\r\n        .then(()=>{\r\n            navigate(\"/\");\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on deleting student. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            \r\n            isLoaded && (\r\n            <>\r\n            <h1>{curStudent.firstName} {curStudent.lastName}</h1>\r\n            <p><b>Age: </b>{curStudent.age}</p>\r\n\r\n            <div>\r\n                <button onClick={deleteStudent}>DELETE STUDENT</button>\r\n            </div>\r\n            \r\n            <CreateOrEditStudent\r\n            curStudent = {curStudent}\r\n            setCurStudent = {setCurStudent}\r\n            />\r\n            \r\n            <hr/>\r\n            <h3>Contact Information</h3>\r\n            {\r\n                contactinfo?\r\n                    <StudentContactInfoAddAndShow \r\n                    isNew={false} \r\n                    callBack={updateContactInfo} \r\n                    contactInfo={contactinfo}\r\n                    />\r\n                    :\r\n                    <StudentContactInfoAddAndShow \r\n                    isNew={true}\r\n                    callBack={addContactInfo} \r\n                    contactInfo={newContactInfo}\r\n                    />\r\n            }\r\n\r\n            <hr/>\r\n            <h3>Dormity Information</h3>\r\n            { dorm && <DormDetails dorm={dorm} /> }\r\n            \r\n            <SelectDormForm callBack = {assignDorm} dorm={dorm} curStudent={curStudent}/>\r\n\r\n            <hr/>\r\n            <h3>Enrolled Classes: </h3>\r\n            {\r\n                enrolledCourses.length ===0 ?\r\n                <p>No enrolling classes yet</p>\r\n                :\r\n                enrolledCourses.map((course, i)=>{\r\n                    return(\r\n                        <>\r\n                        <span key={i}><Link to={\"/courses/\" + course.id}>{course.name}</Link></span> | \r\n                        <RemoveCourseStudent studentId={props.id} courseId={course.id} updateDom={updateDom} fromStudentDetails={true}/>\r\n                        <br/>\r\n                        </>\r\n                    );\r\n                })\r\n            }\r\n\r\n            <hr/>\r\n            <h3>Add Classes to StudentContactInfoAddAndShow</h3>\r\n            {\r\n                availableCourses?\r\n                    <AvailableCourses \r\n                    studentId = {props.id} \r\n                    setEnrolledCourses = {setEnrolledCourses}\r\n                    setAvailableCourses = {setAvailableCourses}\r\n                    availableCourses = {availableCourses}\r\n                    />\r\n                    :\r\n                    <p>No Class Avaiable at This Time</p>\r\n            }\r\n            </>\r\n            )\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudentDetails;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Modal.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\StudentContactInfoAddAndShow.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoForm.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\SelectDormForm.jsx",["90","91"],"import React, { useEffect, useState } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport axios from \"axios\";\r\n\r\nconst SelectDormForm = props =>{\r\n\r\n    const [allDorms, setAllDorms] = useState([]);\r\n    const [selectedDorm, setSelectedDorm] = useState({});\r\n    const [curStudent, setCurStudent] = useState(props.curStudent);\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:8080/api/dorms\")\r\n        .then(res=>{\r\n            if(props.dorm){\r\n                res.data = res.data.filter(dorm => dorm.id !== props.dorm.id);\r\n            }\r\n            setAllDorms(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting all dorms. Details: \" + err);\r\n        });\r\n        return(()=> {setAllDorms([])})\r\n    },[props.dorm])\r\n\r\n    const onChangeHandler = e =>{\r\n        setCurStudent({\r\n            ...curStudent,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const onSubmitHandler = e =>{\r\n        e.preventDefault();\r\n        props.callBack(curStudent)\r\n    };\r\n\r\n    return(\r\n\r\n        <form onSubmit = {onSubmitHandler}>\r\n\r\n            <FormControl style={{minWidth: 200, marginBottom: \"20px\"}}>\r\n                <InputLabel>Assign a Dormity</InputLabel>\r\n                <Select\r\n                name=\"dorm\"\r\n                displayEmpty\r\n                onChange={onChangeHandler}\r\n                >\r\n                    {allDorms.map((dorm, i)=>{\r\n                        return(\r\n                            <MenuItem  value={dorm}  key={i}>{dorm.name}</MenuItem >\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </FormControl>\r\n            <br/>\r\n            <small><input type=\"submit\" value=\"ASSIGN\"/></small>\r\n        </form>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default SelectDormForm;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\RemoveCourseStudent.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\AvailableCourses.jsx",["92"],"import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport CheckBox from \"../module/CheckBox.jsx\";\r\n\r\nconst AvailableCourses = props =>{\r\n\r\n    const [checkedAll, setCheckedAll] = useState(false);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [selectedCourses, setSelectedCourses] = useState([]);\r\n\r\n    const onChangeHandler = (e) => {\r\n        \r\n        setCheckedAll(!checkedAll);\r\n        if(e.target.checked){\r\n            for(let course of props.availableCourses){\r\n                if(!selectedCourses.includes(course.id)){\r\n                    selectedCourses.push(course.id)\r\n                }\r\n            }\r\n        }else{\r\n            setSelectedCourses([]);\r\n        }\r\n    };\r\n    \r\n    const addToSelectedCourses = (isChecked, checkedCourseId) => {\r\n        checkedCourseId = Number(checkedCourseId); \r\n        if(isChecked){\r\n            setSelectedCourses([\r\n                ...selectedCourses,\r\n                checkedCourseId\r\n            ])\r\n        }else{\r\n            setSelectedCourses(selectedCourses.filter(courseId => courseId!== checkedCourseId));\r\n        }\r\n    };\r\n\r\n    const onSubmitHandler = (e) =>{\r\n        e.preventDefault();\r\n        axios.patch(\"http://localhost:8080/api/courses/addstudent/\" + props.studentId, selectedCourses)\r\n        .then(res=>{\r\n            props.setEnrolledCourses(res.data[0]);\r\n            props.setAvailableCourses(res.data[1]);\r\n            // reset the selected course array\r\n            setSelectedCourses([]);\r\n            setCheckedAll(false);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on add courses. Details: \" + err);\r\n        });\r\n    };\r\n    \r\n    return(\r\n        <>\r\n            <form onSubmit={onSubmitHandler}>\r\n                <input type=\"checkbox\" checked={checkedAll} onChange={onChangeHandler} />\r\n                <span> Check All</span>\r\n                <br/>\r\n                {\r\n                    props.availableCourses.map((course, i) => {\r\n                        return(\r\n                            <>\r\n                                <CheckBox \r\n                                key = {i} \r\n                                item = {course} \r\n                                checkedAll = {checkedAll}\r\n                                callBack = {addToSelectedCourses}\r\n                                isLoaded = {isLoaded}\r\n                                setIsLoaded = {setIsLoaded}\r\n                                />\r\n                                <br/>\r\n                            </>\r\n                        );\r\n                    })\r\n                }\r\n                <input type=\"submit\" value=\"Enroll Classes\" />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AvailableCourses;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\CheckBox.jsx",["93"],"import React, {useEffect, useState} from \"react\";\r\n\r\nconst CheckBox = props => {\r\n    \r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        setIsChecked(props.checkedAll);\r\n        props.setIsLoaded(true);\r\n    }, [props.checkedAll, props.isLoaded]);\r\n\r\n    const onChangeHandler = (e) =>{\r\n        setIsChecked(!isChecked);\r\n        props.callBack(e.target.checked, e.target.value)\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            props.isLoaded &&\r\n            <>\r\n            <input \r\n            type=\"checkbox\"\r\n            value={props.item.id}\r\n            checked={isChecked}\r\n            onChange={onChangeHandler}\r\n            />\r\n            <span> {props.item.name}</span>\r\n            </>\r\n        }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckBox;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\NavBar.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\CreateOrEditStudent.jsx",["94"],"import Modal  from \"../module/Modal\";\r\nimport React, {useState} from \"react\";\r\nimport StudentForm from \"./StudentForm\";\r\nimport axios from \"axios\";\r\nimport {navigate} from \"@reach/router\";\r\n\r\n\r\nconst CreateOrEditStudent = props =>{\r\n\r\n    const [newStudent, setNewStudent] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        age: 0\r\n    });\r\n\r\n\r\n    const addNewStudent = (student) => {\r\n        console.log(student);\r\n        axios.post(\"http://localhost:8080/api/students/new\", student)\r\n        .then(res=>{\r\n            navigate(`/students/${res.data.id}`);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on adding student. Details: \" + err);\r\n        });\r\n        console.log()\r\n    };\r\n\r\n    const editStudent = (student) => {\r\n        \r\n        axios.patch(\"http://localhost:8080/api/students/edit/\" + props.curStudent.id, student)\r\n        .then(res=>{\r\n            props.setCurStudent(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on editing student. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            props.curStudent?\r\n            <>\r\n                <Modal\r\n                action = \"Edit Student\"\r\n                modalTitle = \"Edit Student\"\r\n                >\r\n                    <StudentForm \r\n                    initialState = {props.curStudent}\r\n                    callBack = {editStudent}\r\n                    btn = \"Edit\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n                :\r\n            <>\r\n                <Modal\r\n                action = \"Add New Student\"\r\n                modalTitle = \"Add New Student\"\r\n                >\r\n                    <StudentForm \r\n                    initialState = {newStudent}\r\n                    callBack = {addNewStudent}\r\n                    btn = \"Add\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateOrEditStudent;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentForm.jsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":2,"column":17,"nodeType":"101","messageId":"102","endLine":2,"endColumn":25},{"ruleId":"99","severity":1,"message":"103","line":2,"column":27,"nodeType":"101","messageId":"102","endLine":2,"endColumn":31},{"ruleId":"99","severity":1,"message":"104","line":19,"column":28,"nodeType":"101","messageId":"102","endLine":19,"endColumn":45},{"ruleId":"99","severity":1,"message":"105","line":11,"column":12,"nodeType":"101","messageId":"102","endLine":11,"endColumn":24},{"ruleId":"99","severity":1,"message":"106","line":11,"column":26,"nodeType":"101","messageId":"102","endLine":11,"endColumn":41},{"ruleId":"99","severity":1,"message":"107","line":1,"column":16,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"109","line":10,"column":8,"nodeType":"110","endLine":10,"endColumn":42,"suggestions":"111"},{"ruleId":"99","severity":1,"message":"112","line":10,"column":24,"nodeType":"101","messageId":"102","endLine":10,"endColumn":37},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setNewContactInfo' is assigned a value but never used.","'selectedDorm' is assigned a value but never used.","'setSelectedDorm' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["115"],"'setNewStudent' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [props, props.checkedAll, props.isLoaded]",{"range":"118","text":"119"},[249,283],"[props, props.checkedAll, props.isLoaded]"]