[{"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\index.js":"1","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\App.js":"2","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\reportWebVitals.js":"3","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AllStudents.jsx":"4","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentTable.jsx":"5","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentDetails.jsx":"6","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Modal.jsx":"7","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoDetails.jsx":"8","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\StudentContactInfoAddAndShow.jsx":"9","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetails.jsx":"10","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoForm.jsx":"11","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\SelectDormForm.jsx":"12","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseDetails.jsx":"13","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\RemoveCourseStudent.jsx":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":524,"mtime":1610645255953,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":843,"mtime":1610390354321,"results":"19","hashOfConfig":"16"},{"size":3117,"mtime":1610390289443,"results":"20","hashOfConfig":"16"},{"size":5070,"mtime":1610659422338,"results":"21","hashOfConfig":"16"},{"size":1655,"mtime":1610567687849,"results":"22","hashOfConfig":"16"},{"size":351,"mtime":1610501916440,"results":"23","hashOfConfig":"16"},{"size":718,"mtime":1610582842705,"results":"24","hashOfConfig":"16"},{"size":259,"mtime":1610564353164,"results":"25","hashOfConfig":"16"},{"size":1934,"mtime":1610567682877,"results":"26","hashOfConfig":"16"},{"size":2059,"mtime":1610597698780,"results":"27","hashOfConfig":"16"},{"size":1923,"mtime":1610659415531,"results":"28","hashOfConfig":"16"},{"size":928,"mtime":1610658810832,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1myypxa",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\index.js",[],["63","64"],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\App.js",["65","66"],"import './App.css';\nimport {Router, Redirect, Link} from \"@reach/router\";\nimport AllStudents from \"./component/student/AllStudents.jsx\";\nimport StudentDetails from\"./component/student/StudentDetails.jsx\";\nimport CourseDetails from \"./component/course/CourseDetails\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AllStudents path = \"/\" />\n        <StudentDetails path = \"/students/:id\" />\n        <CourseDetails path =\"/courses/:id\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\reportWebVitals.js",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AllStudents.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentTable.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentDetails.jsx",["67","68"],"import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport StudentContactInfoAddAndShow from \"../contactInfo/StudentContactInfoAddAndShow.jsx\";\r\nimport DormDetails from \"../dorm/DormDetails.jsx\";\r\nimport SelectDormForm from \"../dorm/SelectDormForm.jsx\";\r\nimport {Link} from \"@reach/router\";\r\nimport RemoveCourseStudent from \"../course/RemoveCourseStudent.jsx\";\r\n\r\nconst StudentDetails = props =>{\r\n\r\n    const [curStudent, setCurStudent] = useState({});\r\n    const [enrolledCourses, setEnrolledCourses] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [contactinfo, setContactinfo] = useState({});\r\n    const [dorm, setDorm] = useState({})\r\n    const [newContactInfo, setNewContactInfo] = useState({\r\n        homeAddress: \"\",\r\n        email:  \"\",\r\n        phone: \"\",\r\n    });\r\n\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\n    useEffect(()=>{\r\n\r\n        // get current student\r\n        axios.get(\"http://localhost:8080/api/students/\" + props.id)\r\n        .then(res => {\r\n            setCurStudent(res.data);\r\n\r\n            // get student contact info\r\n            setContactinfo(res.data.contactinfo);\r\n\r\n            // get student dorm\r\n            setDorm(res.data.dorm);\r\n\r\n            // get student enrolling courses\r\n            setEnrolledCourses(res.data.courses);\r\n\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting current sutdent. Details: \" + err);\r\n        });\r\n\r\n        return ()=>{ setCurStudent({}); setContactinfo({}); }\r\n    }, [isLoaded, props.id]);\r\n\r\n    // update contact info\r\n    const updateContactInfo = (updatedContactInfo) => {\r\n\r\n        axios.patch(\"http://localhost:8080/api/students/\" + props.id + \"/contactinfos/\" + contactinfo.id, updatedContactInfo, {headers:{\r\n            \"Content-Type\":\"application/json; charset=utf-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }})\r\n\r\n        .then(res=> {\r\n            setCurStudent(res.data);\r\n            \r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"Error on updating contact infomation. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // add new contact infomation\r\n    const addContactInfo = (updatedContactInfo) => {\r\n\r\n        axios.post(\"http://localhost:8080/api/students/\" + props.id + \"/contactinfos\", updatedContactInfo, {headers:{\r\n            \"Content-Type\":\"application/json; charset=utf-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }})\r\n        .then(res=> {\r\n            setCurStudent(res.data);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"Error on creating new contact infomation. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // assign dorm to student\r\n    const assignDorm = (curStudent) => {\r\n        axios.put(\"http://localhost:8080/api/students/\" + props.id + \"/dorms\", curStudent)\r\n        .then(res=>{\r\n            setDorm(res.data);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on assigning dorm. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    const updateDom = (courseId) =>{\r\n        setEnrolledCourses(enrolledCourses.filter(course => course.id !== courseId));\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            \r\n            isLoaded && (\r\n            <>\r\n            <h1>{curStudent.firstName} {curStudent.lastName}</h1>\r\n            <p><b>Age: </b>{curStudent.age}</p>\r\n            \r\n            <hr/>\r\n            <h3>Contact Information</h3>\r\n            {\r\n                contactinfo?\r\n                    <StudentContactInfoAddAndShow \r\n                    isNew={false} \r\n                    callBack={updateContactInfo} \r\n                    contactInfo={contactinfo}\r\n                    />\r\n                    :\r\n                    <StudentContactInfoAddAndShow \r\n                    isNew={true}\r\n                    callBack={addContactInfo} \r\n                    contactInfo={newContactInfo}\r\n                    />\r\n            }\r\n\r\n            <hr/>\r\n            <h3>Dormity Information</h3>\r\n            { dorm && <DormDetails dorm={dorm} /> }\r\n            \r\n            <SelectDormForm callBack = {assignDorm} dorm={dorm} curStudent={curStudent}/>\r\n\r\n            <hr/>\r\n            <h3>Enrolled Classes: </h3>\r\n            {\r\n                enrolledCourses.length ===0 ?\r\n                <p>No enrolling classes yet</p>\r\n                :\r\n                enrolledCourses.map((course, i)=>{\r\n                    return(\r\n                        <>\r\n                        <span key={i}><Link to={\"/courses/\" + course.id}>{course.name}</Link></span> | \r\n                        <RemoveCourseStudent studentId={props.id} courseId={course.id} updateDom={updateDom} fromStudentDetails={true}/>\r\n                        <br/>\r\n                        </>\r\n                    );\r\n                })\r\n            }\r\n            </>\r\n            )\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudentDetails;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Modal.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\StudentContactInfoAddAndShow.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoForm.jsx",[],["69","70"],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\SelectDormForm.jsx",["71","72"],"import React, { useEffect, useState } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport axios from \"axios\";\r\n\r\nconst SelectDormForm = props =>{\r\n\r\n    const [allDorms, setAllDorms] = useState([]);\r\n    const [selectedDorm, setSelectedDorm] = useState({});\r\n    const [curStudent, setCurStudent] = useState(props.curStudent);\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:8080/api/dorms\")\r\n        .then(res=>{\r\n            if(props.dorm){\r\n                res.data = res.data.filter(dorm => dorm.id !== props.dorm.id);\r\n            }\r\n            setAllDorms(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting all dorms. Details: \" + err);\r\n        });\r\n        return(()=> {setAllDorms([])})\r\n    },[props.dorm])\r\n\r\n    const onChangeHandler = e =>{\r\n        setCurStudent({\r\n            ...curStudent,\r\n            [e.target.name]: e.target.value\r\n        });\r\n        //console.log(curStudent)\r\n    };\r\n\r\n    const onSubmitHandler = e =>{\r\n        e.preventDefault();\r\n        console.log(\"submitting\")\r\n        props.callBack(curStudent)\r\n    };\r\n\r\n    return(\r\n\r\n        <form onSubmit = {onSubmitHandler}>\r\n\r\n            <FormControl style={{minWidth: 200, marginBottom: \"20px\"}}>\r\n                <InputLabel>Assign a Dormity</InputLabel>\r\n                <Select\r\n                name=\"dorm\"\r\n                displayEmpty\r\n                onChange={onChangeHandler}\r\n                >\r\n                    {allDorms.map((dorm, i)=>{\r\n                        return(\r\n                            <MenuItem  value={dorm}  key={i}>{dorm.name}</MenuItem >\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </FormControl>\r\n            <br/>\r\n            <small><input type=\"submit\" value=\"ASSIGN\"/></small>\r\n        </form>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default SelectDormForm;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\RemoveCourseStudent.jsx",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":2,"column":17,"nodeType":"79","messageId":"80","endLine":2,"endColumn":25},{"ruleId":"77","severity":1,"message":"81","line":2,"column":27,"nodeType":"79","messageId":"80","endLine":2,"endColumn":31},{"ruleId":"77","severity":1,"message":"82","line":16,"column":28,"nodeType":"79","messageId":"80","endLine":16,"endColumn":45},{"ruleId":"77","severity":1,"message":"83","line":22,"column":11,"nodeType":"79","messageId":"80","endLine":22,"endColumn":19},{"ruleId":"73","replacedBy":"84"},{"ruleId":"75","replacedBy":"85"},{"ruleId":"77","severity":1,"message":"86","line":11,"column":12,"nodeType":"79","messageId":"80","endLine":11,"endColumn":24},{"ruleId":"77","severity":1,"message":"87","line":11,"column":26,"nodeType":"79","messageId":"80","endLine":11,"endColumn":41},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setNewContactInfo' is assigned a value but never used.","'proxyurl' is assigned a value but never used.",["88"],["89"],"'selectedDorm' is assigned a value but never used.","'setSelectedDorm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]