[{"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\index.js":"1","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\App.js":"2","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\reportWebVitals.js":"3","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AllStudents.jsx":"4","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentTable.jsx":"5","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentDetails.jsx":"6","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Modal.jsx":"7","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoDetails.jsx":"8","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\StudentContactInfoAddAndShow.jsx":"9","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetails.jsx":"10","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoForm.jsx":"11","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\SelectDormForm.jsx":"12","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseDetails.jsx":"13","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\RemoveCourseStudent.jsx":"14","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\AvailableCourses.jsx":"15","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\CheckBox.jsx":"16","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\NavBar.jsx":"17","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\CreateOrEditStudent.jsx":"18","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentForm.jsx":"19","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\AllDorms.jsx":"20","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormTable.jsx":"21","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetailsShow.jsx":"22","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\CreateOrEditDorm.jsx":"23","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormForm.jsx":"24","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CreateOrEditCourse.jsx":"25","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseForm.jsx":"26","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\AllCourses.jsx":"27","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseTable.jsx":"28","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Delete.jsx":"29","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\RemoveStudentFromDorm.jsx":"30","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AvailableStudents.jsx":"31"},{"size":500,"mtime":499162500000,"results":"32","hashOfConfig":"33"},{"size":1307,"mtime":1610991271029,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"33"},{"size":767,"mtime":1610829170689,"results":"36","hashOfConfig":"33"},{"size":3117,"mtime":1610390289443,"results":"37","hashOfConfig":"33"},{"size":7445,"mtime":1610997100549,"results":"38","hashOfConfig":"33"},{"size":1585,"mtime":1610835202565,"results":"39","hashOfConfig":"33"},{"size":351,"mtime":1610501916440,"results":"40","hashOfConfig":"33"},{"size":938,"mtime":1610816369316,"results":"41","hashOfConfig":"33"},{"size":3742,"mtime":1611009448648,"results":"42","hashOfConfig":"33"},{"size":1724,"mtime":1610835157558,"results":"43","hashOfConfig":"33"},{"size":1989,"mtime":1610676864559,"results":"44","hashOfConfig":"33"},{"size":3946,"mtime":1611011593439,"results":"45","hashOfConfig":"33"},{"size":839,"mtime":1611009881216,"results":"46","hashOfConfig":"33"},{"size":2995,"mtime":1611011827993,"results":"47","hashOfConfig":"33"},{"size":971,"mtime":1611006994385,"results":"48","hashOfConfig":"33"},{"size":333,"mtime":1610991392230,"results":"49","hashOfConfig":"33"},{"size":1941,"mtime":1610933070161,"results":"50","hashOfConfig":"33"},{"size":1672,"mtime":1610835350016,"results":"51","hashOfConfig":"33"},{"size":961,"mtime":1610993407036,"results":"52","hashOfConfig":"33"},{"size":3211,"mtime":1610993556642,"results":"53","hashOfConfig":"33"},{"size":267,"mtime":1610856111903,"results":"54","hashOfConfig":"33"},{"size":1830,"mtime":1610935209201,"results":"55","hashOfConfig":"33"},{"size":1326,"mtime":1610934169356,"results":"56","hashOfConfig":"33"},{"size":1888,"mtime":1610947893263,"results":"57","hashOfConfig":"33"},{"size":1356,"mtime":1610946450407,"results":"58","hashOfConfig":"33"},{"size":988,"mtime":1610993906451,"results":"59","hashOfConfig":"33"},{"size":3236,"mtime":1610993818511,"results":"60","hashOfConfig":"33"},{"size":555,"mtime":1610993565812,"results":"61","hashOfConfig":"33"},{"size":625,"mtime":1611008993734,"results":"62","hashOfConfig":"33"},{"size":3032,"mtime":1611012059343,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1myypxa",{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\index.js",[],["135","136"],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\App.js",["137","138"],"import './App.css';\nimport {Router, Redirect, Link} from \"@reach/router\";\nimport AllStudents from \"./component/student/AllStudents.jsx\";\nimport AllDorms from \"./component/dorm/AllDorms.jsx\";\nimport StudentDetails from \"./component/student/StudentDetails.jsx\";\nimport DormDetails from \"./component/dorm/DormDetails.jsx\";\nimport CourseDetails from \"./component/course/CourseDetails.jsx\";\nimport NavBar from \"./component/module/NavBar\";\nimport CreateOrEditStudent from \"./component/student/CreateOrEditStudent.jsx\";\nimport CreateOrEditDorm from \"./component/dorm/CreateOrEditDorm.jsx\";\nimport CreateOrEditCourse from \"./component/course/CreateOrEditCourse.jsx\";\nimport AllCourses from \"./component/course/AllCourses.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar>\n      <div style={{display: \"flex\", justifyContent:\"space-evenly\"}}>\n        <CreateOrEditStudent />\n        <CreateOrEditDorm />  \n        <CreateOrEditCourse />  \n      </div>\n      <Router>\n        <AllStudents path = \"/\" />\n        <StudentDetails path = \"/students/:id\" />\n        <AllDorms path = \"/dorms\" />\n        <DormDetails path = \"/dorms/:id\" />\n        <AllCourses path = \"/courses\" />\n        <CourseDetails path =\"/courses/:id\" />\n      </Router>\n      </NavBar>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\reportWebVitals.js",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AllStudents.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentTable.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentDetails.jsx",["139"],"import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport StudentContactInfoAddAndShow from \"../contactInfo/StudentContactInfoAddAndShow.jsx\";\r\nimport DormDetailsShow from \"../dorm/DormDetailsShow.jsx\";\r\nimport SelectDormForm from \"../dorm/SelectDormForm.jsx\";\r\nimport {Link, navigate} from \"@reach/router\";\r\nimport RemoveCourseStudent from \"../course/RemoveCourseStudent.jsx\";\r\nimport AvailableCourses from \"../course/AvailableCourses.jsx\";\r\nimport CreateOrEditStudent from \"./CreateOrEditStudent.jsx\";\r\n\r\nconst StudentDetails = props =>{\r\n\r\n    const [curStudent, setCurStudent] = useState({});\r\n    const [enrolledCourses, setEnrolledCourses] = useState([]);\r\n    const [availableCourses, setAvailableCourses] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [contactinfo, setContactinfo] = useState({});\r\n    const [dorm, setDorm] = useState({})\r\n    const [newContactInfo, setNewContactInfo] = useState({\r\n        homeAddress: \"\",\r\n        email:  \"\",\r\n        phone: \"\",\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        // get current student\r\n        axios.get(\"http://localhost:8080/api/students/\" + props.id)\r\n        .then(res => {\r\n            setCurStudent(res.data);\r\n\r\n            // get student contact info\r\n            setContactinfo(res.data.contactinfo);\r\n\r\n            // get student dorm\r\n            setDorm(res.data.dorm);\r\n\r\n            // get student enrolling courses\r\n            setEnrolledCourses(res.data.courses);\r\n\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting current sutdent. Details: \" + err);\r\n        });\r\n\r\n        // get unerolled courses\r\n        axios.get(\"http://localhost:8080/api/courses/students/\" + props.id)\r\n        .then(res=>{\r\n            setAvailableCourses(res.data);\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting available courses. Details: \" + err);\r\n        });\r\n\r\n        return ()=>{ setCurStudent({}); setContactinfo({}); setDorm({}); setAvailableCourses([]); }\r\n    }, [isLoaded, props.id]);\r\n\r\n    // update contact info\r\n    const updateContactInfo = (updatedContactInfo) => {\r\n\r\n        axios.patch(\"http://localhost:8080/api/students/\" + props.id + \"/contactinfos/\" + contactinfo.id, updatedContactInfo, {headers:{\r\n            \"Content-Type\":\"application/json; charset=utf-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }})\r\n\r\n        .then(res=> {\r\n            setCurStudent(res.data);\r\n            \r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"Error on updating contact infomation. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // add new contact infomation\r\n    const addContactInfo = (updatedContactInfo) => {\r\n\r\n        axios.post(\"http://localhost:8080/api/students/\" + props.id + \"/contactinfos\", updatedContactInfo, {headers:{\r\n            \"Content-Type\":\"application/json; charset=utf-8\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n        }})\r\n        .then(res=> {\r\n            setCurStudent(res.data);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err =>{\r\n            console.log(\"Error on creating new contact infomation. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // assign dorm to student\r\n    const assignDorm = (curStudent) => {\r\n        axios.put(\"http://localhost:8080/api/students/\" + props.id + \"/dorms\", curStudent)\r\n        .then(res=>{\r\n            setDorm(res.data);\r\n            setIsLoaded(false);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on assigning dorm. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    // update enrolledCourses and availableCourses\r\n    const updateDom = (courseRemoved) =>{\r\n        setEnrolledCourses(enrolledCourses.filter(course => course.id !== courseRemoved.id));\r\n        setAvailableCourses([...availableCourses, courseRemoved])\r\n    };\r\n\r\n    // delete this student\r\n    const deleteStudent = (e) => {\r\n        e.preventDefault();\r\n        axios.delete(\"http://localhost:8080/api/students/\" + props.id)\r\n        .then(()=>{\r\n            navigate(\"/\");\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on deleting student. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            \r\n            isLoaded && (\r\n            <>\r\n            <h1>{curStudent.firstName} {curStudent.lastName}</h1>\r\n            <p><b>Age: </b>{curStudent.age}</p>\r\n\r\n            <div>\r\n                <button onClick={deleteStudent}>DELETE STUDENT</button>\r\n            </div>\r\n            \r\n            <CreateOrEditStudent\r\n            curStudent = {curStudent}\r\n            setCurStudent = {setCurStudent}\r\n            />\r\n            \r\n            <hr/>\r\n            <h3>Contact Information</h3>\r\n            {\r\n                contactinfo?\r\n                    <StudentContactInfoAddAndShow \r\n                    isNew={false} \r\n                    callBack={updateContactInfo} \r\n                    contactInfo={contactinfo}\r\n                    />\r\n                    :\r\n                    <StudentContactInfoAddAndShow \r\n                    isNew={true}\r\n                    callBack={addContactInfo} \r\n                    contactInfo={newContactInfo}\r\n                    />\r\n            }\r\n\r\n            <hr/>\r\n            <h3>Dormity Information</h3>\r\n            { dorm && <DormDetailsShow dorm={dorm} /> }\r\n            \r\n            <SelectDormForm callBack = {assignDorm} dorm={dorm} curStudent={curStudent}/>\r\n\r\n            <hr/>\r\n            <h3>Enrolled Classes: </h3>\r\n            {\r\n                enrolledCourses.length ===0 ?\r\n                <p>No enrolling classes yet</p>\r\n                :\r\n                <table style={{margin: \"auto\"}}>\r\n                    <tbody>\r\n                    {\r\n                        enrolledCourses.map((course, i)=>{\r\n                            return(\r\n                                <tr>\r\n                                    <td key={i}>\r\n                                        <Link to={\"/courses/\" + course.id}>{course.name}</Link>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <RemoveCourseStudent\r\n                                        studentId={props.id} \r\n                                        courseId={course.id} \r\n                                        updateDom={updateDom} \r\n                                        fromStudentDetails={true}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            }\r\n\r\n            <hr/>\r\n            <h3>Add Classes to Student</h3>\r\n            {\r\n                availableCourses?\r\n                    <AvailableCourses \r\n                    studentId = {props.id} \r\n                    setEnrolledCourses = {setEnrolledCourses}\r\n                    setAvailableCourses = {setAvailableCourses}\r\n                    availableCourses = {availableCourses}\r\n                    />\r\n                    :\r\n                    <p>No Class Avaiable at This Time</p>\r\n            }\r\n            </>\r\n            )\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudentDetails;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Modal.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\StudentContactInfoAddAndShow.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetails.jsx",["140"],"import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport DormDetailsShow from \"./DormDetailsShow\";\r\nimport CreateOrEditDorm from \"./CreateOrEditDorm.jsx\";\r\nimport {Link} from \"@reach/router\";\r\nimport RemoveStudentFromDorm from \"./RemoveStudentFromDorm.jsx\";\r\nimport AvailableStudents from \"../student/AvailableStudents.jsx\";\r\n\r\nconst DormDetails = props => {\r\n\r\n    const [curDorm, setCurDorm] = useState({});\r\n    const [studentsInDorm, setStudentsInDorm] = useState([]);\r\n    const [studentsHaveNoDorm, setStudentHaveNoDorm] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:8080/api/dorms/\" + props.id)\r\n        .then(res=>{\r\n            setCurDorm(res.data);\r\n            setStudentsInDorm(res.data.students);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on geting dorm information. Details: \" + err);\r\n        });\r\n        \r\n        axios.get(\"http://localhost:8080/api/students/nodorm\")\r\n        .then(res=>{\r\n            setStudentHaveNoDorm(res.data);\r\n            setIsLoaded(true);\r\n        })\r\n        .catch(err=>{\r\n            console.log(`Error on getting students have no dorm. Detail : ${err}`);\r\n        });\r\n\r\n        return( ()=> { setCurDorm({}); setStudentHaveNoDorm([]); } );\r\n    }, [isLoaded]);\r\n\r\n    const updateDom = removedStudent => {\r\n        \r\n        setStudentsInDorm(studentsInDorm.filter(student=>\r\n            student.id !== removedStudent.id\r\n        ));\r\n\r\n        setStudentHaveNoDorm([\r\n            ...studentsHaveNoDorm,\r\n            removedStudent\r\n        ]);\r\n\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            isLoaded && \r\n                <>\r\n                <DormDetailsShow dorm = {curDorm} />\r\n                \r\n                <CreateOrEditDorm  \r\n                curDorm = {curDorm} \r\n                setCurDorm = {setCurDorm}\r\n                />\r\n                <hr/>\r\n\r\n                <h3>Students in Dorm</h3>\r\n                {\r\n                    studentsInDorm.length === 0?\r\n                        <p>This Dormity is Empty</p>\r\n                        :\r\n                        <table style={{margin: \"auto\"}}>\r\n                            <tbody>\r\n                            {\r\n                                studentsInDorm.map((student, i) => {\r\n                                    return(\r\n                                        <tr>\r\n                                            <td><Link to={`/students/${student.id}`}>{student.firstName} {student.lastName}</Link></td>\r\n                                            \r\n                                            <td>\r\n                                                <RemoveStudentFromDorm\r\n                                                studentId = {student.id}\r\n                                                updateDom = {updateDom}\r\n                                                />\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            }\r\n                            </tbody>\r\n                        </table>\r\n                        \r\n                }\r\n                <hr/>\r\n\r\n                <h3>Add Students to Dorm: </h3>\r\n                <AvailableStudents\r\n                items = \"dorms\"\r\n                itemId = {props.id}\r\n                setNotAvailableStudents = {setStudentsInDorm}\r\n                setAvailableStudents = {setStudentHaveNoDorm}\r\n                availableStudents = {studentsHaveNoDorm}\r\n                />\r\n                </>\r\n        }\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default DormDetails;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\contactInfo\\ContactInfoForm.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\SelectDormForm.jsx",["141","142"],"import React, { useEffect, useState } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport axios from \"axios\";\r\n\r\nconst SelectDormForm = props =>{\r\n\r\n    const [allDorms, setAllDorms] = useState([]);\r\n    const [selectedDorm, setSelectedDorm] = useState({});\r\n    const [curStudent, setCurStudent] = useState(props.curStudent);\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:8080/api/dorms\")\r\n        .then(res=>{\r\n            if(props.dorm){\r\n                res.data = res.data.filter(dorm => dorm.id !== props.dorm.id);\r\n            }\r\n            setAllDorms(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on getting all dorms. Details: \" + err);\r\n        });\r\n        return(()=> {setAllDorms([])})\r\n    },[props.dorm])\r\n\r\n    const onChangeHandler = e =>{\r\n        setCurStudent({\r\n            ...curStudent,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const onSubmitHandler = e =>{\r\n        e.preventDefault();\r\n        props.callBack(curStudent)\r\n    };\r\n\r\n    return(\r\n\r\n        <form onSubmit = {onSubmitHandler}>\r\n\r\n            <FormControl style={{minWidth: 200, marginBottom: \"20px\"}}>\r\n                <InputLabel>Assign a Dormity</InputLabel>\r\n                <Select\r\n                name=\"dorm\"\r\n                displayEmpty\r\n                onChange={onChangeHandler}\r\n                >\r\n                    {allDorms.map((dorm, i)=>{\r\n                        return(\r\n                            <MenuItem  value={dorm}  key={i}>{dorm.name}</MenuItem >\r\n                        );\r\n                    })}\r\n                </Select>\r\n            </FormControl>\r\n            <br/>\r\n            <small><input type=\"submit\" value=\"ASSIGN\"/></small>\r\n        </form>\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default SelectDormForm;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseDetails.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\RemoveCourseStudent.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\AvailableCourses.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\CheckBox.jsx",["143"],"import React, {useEffect, useState} from \"react\";\r\n\r\nconst CheckBox = props => {\r\n    \r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        setIsChecked(props.checkedAll);\r\n        props.setIsLoaded(true);\r\n    }, [props.checkedAll, props.isLoaded]);\r\n\r\n    const onChangeHandler = (e) =>{\r\n        setIsChecked(!isChecked);\r\n        props.callBack(e.target.checked, e.target.value)\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            props.isLoaded &&\r\n            <>\r\n            <input \r\n            type=\"checkbox\"\r\n            value={props.item.id}\r\n            checked={isChecked}\r\n            onChange={onChangeHandler}\r\n            />\r\n            {\r\n                props.student?\r\n                <span> {props.item.firstName} {props.item.lastName}</span>\r\n                :\r\n                <span> {props.item.name}</span>\r\n            }\r\n            </>\r\n        }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckBox;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\NavBar.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\CreateOrEditStudent.jsx",["144"],"import Modal  from \"../module/Modal\";\r\nimport React, {useState} from \"react\";\r\nimport StudentForm from \"./StudentForm\";\r\nimport axios from \"axios\";\r\nimport {navigate} from \"@reach/router\";\r\n\r\n\r\nconst CreateOrEditStudent = props =>{\r\n\r\n    const [newStudent, setNewStudent] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        age: 0\r\n    });\r\n\r\n\r\n    const addNewStudent = (student) => {\r\n        axios.post(\"http://localhost:8080/api/students/new\", student)\r\n        .then(res=>{\r\n            navigate(`/students/${res.data.id}`);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on adding student. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    const editStudent = (student) => {\r\n        \r\n        axios.patch(\"http://localhost:8080/api/students/edit/\" + props.curStudent.id, student)\r\n        .then(res=>{\r\n            props.setCurStudent(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on editing student. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            props.curStudent?\r\n            <>\r\n                <Modal\r\n                action = \"Edit Student\"\r\n                modalTitle = \"Edit Student\"\r\n                >\r\n                    <StudentForm \r\n                    initialState = {props.curStudent}\r\n                    callBack = {editStudent}\r\n                    btn = \"Edit\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n                :\r\n            <>\r\n                <Modal\r\n                action = \"Add New Student\"\r\n                modalTitle = \"Add New Student\"\r\n                >\r\n                    <StudentForm \r\n                    initialState = {newStudent}\r\n                    callBack = {addNewStudent}\r\n                    btn = \"Add\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateOrEditStudent;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\StudentForm.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\AllDorms.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormTable.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormDetailsShow.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\CreateOrEditDorm.jsx",["145"],"import React, {useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport Modal from \"../module/Modal.jsx\";\r\nimport DormForm from \"../dorm/DormForm.jsx\";\r\nimport {navigate} from \"@reach/router\";\r\n\r\nconst CreateOrEditDorm = props => {\r\n\r\n    const [newDorm, setNewDorm] = useState({\r\n        name: \"\",\r\n        address: \"\"\r\n    });\r\n\r\n    const addNewDorm = (dorm) =>{\r\n        axios.post(\"http://localhost:8080/api/dorms/new\", dorm)\r\n        .then(res=>{\r\n            navigate(\"/dorms/\" + res.data.id);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on creating new dorm . Details: \" + err);\r\n        })\r\n\r\n    };\r\n\r\n    const editDorm = (dorm) =>{\r\n        axios.patch(\"http://localhost:8080/api/dorms/\" + props.curDorm.id, dorm)\r\n        .then(res=>{\r\n            props.setCurDorm(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on editing dorm . Details: \" + err);\r\n        })\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            props.curDorm?\r\n            <>\r\n                <Modal\r\n                action = \"Edit Dorm\"\r\n                modalTitle = \"Eidt Dorm\" \r\n                >\r\n                    <DormForm\r\n                    initialState = {props.curDorm}\r\n                    callBack = {editDorm}\r\n                    btn = \"Edit\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n                :\r\n            <>\r\n                <Modal\r\n                action = \"Add New Dorm\"\r\n                modalTitle = \"Add New Dorm\" \r\n                >\r\n                    <DormForm\r\n                    initialState = {newDorm}\r\n                    callBack = {addNewDorm}\r\n                    btn = \"Add\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n        }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CreateOrEditDorm;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\DormForm.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CreateOrEditCourse.jsx",["146"],"import React, {useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport Modal from \"../module/Modal.jsx\";\r\nimport CourseForm from \"../course/CourseForm.jsx\";\r\nimport {navigate} from \"@reach/router\";\r\n\r\n\r\nconst CreateOrEditCourse = props => {\r\n\r\n    const [newCourse, setNewCourse] = useState({\r\n        name: \"\",\r\n        description: \"\"\r\n    });\r\n\r\n    const addNewCourse = (course) => {\r\n        axios.post(\"http://localhost:8080/api/courses/new\", course)\r\n        .then(res=>{\r\n            navigate(\"/courses/\" + res.data.id);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on adding new course. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    const editCourse =(course) => {\r\n        axios.patch(\"http://localhost:8080/api/courses/\" + props.curCourse.id, course)\r\n        .then(res=>{\r\n            props.setCurCourse(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"Error on editing course. Details: \" + err);\r\n        });\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {\r\n            props.curCourse?\r\n            <>\r\n                <Modal\r\n                action = \"Edit Course\"\r\n                modalTitle = \"Edit Course\"\r\n                >\r\n                    <CourseForm\r\n                    initialState = {props.curCourse}\r\n                    callBack = {editCourse}\r\n                    btn = \"Edit\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n            :\r\n            <>\r\n                <Modal\r\n                action = \"Add New Course\"\r\n                modalTitle = \"Add New Course\"\r\n                >\r\n                    <CourseForm\r\n                    initialState = {newCourse}\r\n                    callBack = {addNewCourse}\r\n                    btn = \"Add\"\r\n                    />\r\n                </Modal>\r\n            </>\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateOrEditCourse;","D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseForm.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\AllCourses.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\course\\CourseTable.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\module\\Delete.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\dorm\\RemoveStudentFromDorm.jsx",[],"D:\\Dojo_Assignments\\Java\\SpringBoot\\studentRoster\\client\\src\\component\\student\\AvailableStudents.jsx",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":17,"nodeType":"153","messageId":"154","endLine":2,"endColumn":25},{"ruleId":"151","severity":1,"message":"155","line":2,"column":27,"nodeType":"153","messageId":"154","endLine":2,"endColumn":31},{"ruleId":"151","severity":1,"message":"156","line":19,"column":28,"nodeType":"153","messageId":"154","endLine":19,"endColumn":45},{"ruleId":"157","severity":1,"message":"158","line":36,"column":8,"nodeType":"159","endLine":36,"endColumn":18,"suggestions":"160"},{"ruleId":"151","severity":1,"message":"161","line":11,"column":12,"nodeType":"153","messageId":"154","endLine":11,"endColumn":24},{"ruleId":"151","severity":1,"message":"162","line":11,"column":26,"nodeType":"153","messageId":"154","endLine":11,"endColumn":41},{"ruleId":"157","severity":1,"message":"163","line":10,"column":8,"nodeType":"159","endLine":10,"endColumn":42,"suggestions":"164"},{"ruleId":"151","severity":1,"message":"165","line":10,"column":24,"nodeType":"153","messageId":"154","endLine":10,"endColumn":37},{"ruleId":"151","severity":1,"message":"166","line":9,"column":21,"nodeType":"153","messageId":"154","endLine":9,"endColumn":31},{"ruleId":"151","severity":1,"message":"167","line":10,"column":23,"nodeType":"153","messageId":"154","endLine":10,"endColumn":35},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setNewContactInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.","ArrayExpression",["170"],"'selectedDorm' is assigned a value but never used.","'setSelectedDorm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["171"],"'setNewStudent' is assigned a value but never used.","'setNewDorm' is assigned a value but never used.","'setNewCourse' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [isLoaded, props.id]",{"range":"176","text":"177"},"Update the dependencies array to be: [props, props.checkedAll, props.isLoaded]",{"range":"178","text":"179"},[1337,1347],"[isLoaded, props.id]",[249,283],"[props, props.checkedAll, props.isLoaded]"]